# Versão do Docker Compose (ver documentação do Docker Compose)
version: '3.8'

services:

  back:
  # Docker image do serviço
    build:
    # Caminho do Dockerfile e diretório de build
      context: ./backend
      dockerfile: Dockerfile
      # Nome da imagem gerada
    image: backend-ebytr
    # Nome do container
    container_name: backend-ebytr
    # Diretório de instalação do serviço
    volumes:
      - backend-data:/usr/src/app
    # Porta de comunicação do serviço
    ports:
      - "3001:3001"
    # Redes que executam os serviços  
    networks:
      - backend
      - frontend
    # Dependências do serviço
    depends_on:
      - mongo
    # Comando e execução do serviço
    command: npm start
    # Garante que caso o serviço caia, ele retorne ativo novamente
    restart: always

  mongo:
    # Imagem do do serviço a ser baixado no Docker Hub
    image: mongo
    # Nome do container
    container_name: mongo-ebytr
    # Diretório de instalação do serviço
    volumes:
      - mongodb-data:/data/db
    # Porta de comunicação do serviço
    ports:
      - "27017:27017"
    # Rede que executa os serviços
    networks:
      - backend
    # Variáveis para funcionamento do mongo
    environment:
      MONGO_INITDB_DATABASE: ToDoEbytr
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
      MONGODB_DATA_DIR: /data/db
      MONDODB_LOG_DIR: /dev/null
    restart: always

  front:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    image: frontend-ebytr
    container_name: frontend-ebytr
    volumes:
      - frontend-data:/usr/app
    depends_on:
      - back
    ports:
      - "3000:3000"
    networks:
      - frontend
    command: npm start

networks:
    # Define o tipo de rede que será utilizado. Bridge é ponte entre os containers
    frontend:
        driver: bridge
    backend:
        driver: bridge

volumes:
    # Define o tipo de volume que será utilizado. Bind é um volume de um container para outro. Local é um volume local no container.
    frontend-data:
      driver: local
    backend-data:
      driver: local
    mongodb-data:
      driver: local

# Para criar uma compilação para toda a aplicação, execute:
# docker-compose build

# Para criar e iniciar o sistema multi-container, execute:
# docker-compose up -d

# Para parar o sistema multi-container, execute:
# docker-compose down --rmi all -v
# --rmi all -v remove todas as imagens e volumes criados

# Para abrir o frontend no navegador, http://localhost:3000 
# O servidor de back-end está ativo http://localhost:5000
# E o MongoDB está rodando em http://localhost:27017

# Para inspecionar serviços em execução use o comando "docker-compose ps"

# O "docker-compose logs" mostrará os logs de todos os serviços em execução.

# O docker-compose down --volumes para todos os serviços e remove todos os volumes. ATENÇÃO!!!

# lista imagens
# docker-compose images

# lista containeres
# docker-compose ps

# mostra os containeres que estão rodando
#docker-compose top

# remove containeres parados
# docker-compose remove

# Referência:
# https://www.digitalocean.com/community/tutorials/how-to-set-up-flask-with-mongodb-and-docker-pt
# https://blog.tericcabrel.com/using-docker-and-docker-compose-with-nodejs-and-mongodb/
# https://medium.com/bb-tutorials-and-thoughts/how-to-run-mern-stack-on-docker-compose-fad2050b9e
# https://www.youtube.com/watch?v=Kzcz-EVKBEQ
# https://docs.docker.com/compose/reference/down/